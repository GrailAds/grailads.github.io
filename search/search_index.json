{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to GrailAds You are a - Publisher Advertiser","title":"Home"},{"location":"#welcome-to-grailads","text":"You are a - Publisher Advertiser","title":"Welcome to GrailAds"},{"location":"adformats/","text":"We at GrailAds are currently offering 3 Ad Formats (Banner, Interstitial, and Rewarded) best suited for your app. We support both landscape and portrait mode and are continuos innovating on new formats. Below are the looks of our ad format. Your feedback is important for us. Do tell us at info.grailads@gmail.com your views and suggestions Interstitial Portrait Landscape Rewarded Portrait Landscape","title":"Ad Formats"},{"location":"advertiser/","text":"Welcome to GrailAds Getting Started with Ad Publication Go to GrailAds Business to register yourself as a advertiser. After registration and verification, go to Uploader section . Select the type of your ad you want to publish( Banner or Interstitial or Rewarded ). Upload Ad media files and other details relevant to your advertisement. Fill in parameters that define your target audience. Publish your Ad. Go to Payment section and pay the money to run your ad campaign. After our verification of your campaign, Your ad campaign will start for the duration of time you mentioned. Use your dashboard to view how your campaign is performing.","title":"How to publish Ad"},{"location":"advertiser/#welcome-to-grailads","text":"","title":"Welcome to GrailAds"},{"location":"advertiser/#getting-started-with-ad-publication","text":"Go to GrailAds Business to register yourself as a advertiser. After registration and verification, go to Uploader section . Select the type of your ad you want to publish( Banner or Interstitial or Rewarded ). Upload Ad media files and other details relevant to your advertisement. Fill in parameters that define your target audience. Publish your Ad. Go to Payment section and pay the money to run your ad campaign. After our verification of your campaign, Your ad campaign will start for the duration of time you mentioned. Use your dashboard to view how your campaign is performing.","title":"Getting Started with Ad Publication"},{"location":"banner/","text":"Banner Ad Banner Ad private GrailAdsBanner newUnityBanner; public AdSize adSize; // AdSize used for Banner Ad public void RequestAndLoadBanner() { adSize = new AdSize(-1f , 200f ) ; //Banner initializing newUnityBanner = new GrailAdsBanner(publisherAddress , publisherAppID , env, adSize , AdPosition.Bottom); // use `AdPosition.Top` to place banner at top of screen //Subscribe to events newUnityBanner.OnAdLoaded += HandleOnAdLoaded; newUnityBanner.OnAdClicked += HandleOnAdClicked; newUnityBanner.OnFailure += HandleOnFailure; newUnityBanner.OnAdClosed += HandleOnAdClosed; newUnityBanner.OnAdOpened += HandleOnAdOpened; newUnityBanner.OnPaidListener += HandleOnPaid; //Loading Ad newUnityBanner.LoadAd(); } //To show Banner Ad public void ShowBanner(){ newUnityBanner.Show(); } //Always destroy previous banner before showing next one //To destroy Banner Ad public void Destroy_Banner(){ newUnityBanner.Destroy(); } public void HandleOnAdLoaded(object sender, EventArgs args) { //your action } public void HandleOnAdClicked(object sender, EventArgs args) { //your action } public void HandleOnFailure(object sender, EventArgs args) { //your action } public void HandleOnAdClosed(object sender, EventArgs args) { //your action } public void HandleOnAdOpened(object sender, EventArgs args) { //your action } public void HandleOnPaid(object sender, EventArgs args) { //your action }","title":"Banner"},{"location":"banner/#banner-ad","text":"","title":"Banner Ad"},{"location":"banner/#banner-ad_1","text":"private GrailAdsBanner newUnityBanner; public AdSize adSize; // AdSize used for Banner Ad public void RequestAndLoadBanner() { adSize = new AdSize(-1f , 200f ) ; //Banner initializing newUnityBanner = new GrailAdsBanner(publisherAddress , publisherAppID , env, adSize , AdPosition.Bottom); // use `AdPosition.Top` to place banner at top of screen //Subscribe to events newUnityBanner.OnAdLoaded += HandleOnAdLoaded; newUnityBanner.OnAdClicked += HandleOnAdClicked; newUnityBanner.OnFailure += HandleOnFailure; newUnityBanner.OnAdClosed += HandleOnAdClosed; newUnityBanner.OnAdOpened += HandleOnAdOpened; newUnityBanner.OnPaidListener += HandleOnPaid; //Loading Ad newUnityBanner.LoadAd(); } //To show Banner Ad public void ShowBanner(){ newUnityBanner.Show(); } //Always destroy previous banner before showing next one //To destroy Banner Ad public void Destroy_Banner(){ newUnityBanner.Destroy(); } public void HandleOnAdLoaded(object sender, EventArgs args) { //your action } public void HandleOnAdClicked(object sender, EventArgs args) { //your action } public void HandleOnFailure(object sender, EventArgs args) { //your action } public void HandleOnAdClosed(object sender, EventArgs args) { //your action } public void HandleOnAdOpened(object sender, EventArgs args) { //your action } public void HandleOnPaid(object sender, EventArgs args) { //your action }","title":"Banner Ad"},{"location":"faq/","text":"Q. How difficult is it to integrate GrailAds SDK/Plugin? A. GrailAds SDK and Plugin are build on line with common ad sdk and plugin available today in market. We are available for your support 24*7. Our experience says it will take 20 min to integrate our SDK and Plugin in your app. Steps for integration can be found in our Documentation . Q. What if users don't have Grail app installed? A. We recommend use of secondary partner to be called in case of Grail app is not installed on users device. You can tell users to install Grail app if they want to earn money while using your app. As part of our starting offer, we are giving 10% of every new user referred by you will earn for lifetime to you. Q. How will GrailAds help me increasing value of my users? A. By using GrailAds, you will allow your users to earn money while using your app as usual. Basically converting your app into a money making app. Q. Is GrailAds compliant with data privacy laws? A. We don't take users any personal information out of his device. Hence we are compliant with every data privacy law of the world. GrailAds work on the vision of making user and his data privacy a priority for AdTech industry. We believe to solve and stop all data privacy related fraud, we need to stop collection of data outside users device only. We are building a suite of solution to leverage local data profiling starting from ads solution. Q. What about the ad revenue lost due to low network connectivity or offline app use? A. Our ads are available to user even if there is little or no internet connectivity at time. With this, apps can now leverage their offline games and apps to generate revenue thought to be lost until now. Q. What is the loading time for ad? A. Ads by us have the fastest loading time as we pre download most relevant ad for user on his device. Q. How do i monitor performance of app and statistics? A. You can monitor your app performance from your dashboard Q. Why should i refer users to install Grail app? A. Grail is an initiative to change how mobile advertisement work and we seek your support and guidance in it. Apart from this for every new user refereed by you, we are giving 10% of what he will earn for lifetime. Also the fact that use will warn money while using app like yours, It will make your app more valuable to your user.","title":"FAQ(Publisher)"},{"location":"faq_advertiser/","text":"Q. What type of ad formats are available? A. Three ad formats namely Banner, Interstitial, Rewarded are available. These are available for both portrait and landscape mode apps. We are continuously working on making the best ad formats for you. Send in your suggestion to info.grailads@gmail.com Q. How can i track my campaign progress? A. You can track your ad campaign on your dashboard Q. Is targeting of my campaign to specific userbase possible? A. Yes. With GrailAds you can target your ad campaign to specific type of user you wish to show your ad to. All the available parameters that can be used to target ads to the user can be found here Q. How do i know if my campaign is not being scammed through use of bots or in other mischievous way? A. Every user using GrailAds is a verified user. With this it is automatically instilled that your ads have real eyeballs looking at them. On top of that we are building models to detect any irregular behavior. Q. Is GrailAds compliant with data privacy law? A. We don't take users any personal information out of his device. Hence we are compliant with every data privacy law of the world. GrailAds work on the vision of making user and his data privacy a priority for AdTech industry. We believe to solve and stop all data privacy related fraud, we need to stop collection of data outside users device only. We are building a suite of solution to leverage local data profiling starting from ads solution. Q. How is GrailAds claiming to ensure data privacy of user and still able to target ads so precisely? A. We don't take users any personal information out of his device. Hence we are compliant with every data privacy law of the world. We at GrailAds have build models that run locally on users device to filter out best ads for the users. Through our specialized models, we are leveraging benefit of total data privacy and personalization at the same time. Q. How are my ads not an incentivized ad if user is being rewarded? A. We don't reward user to interact with your ads. Interaction with ads are totally based on users interest. Users are getting rewarded passively while they are using apps and games that they already use based on their interests. This makes your ads as normal as it can and we can assure you all the leads you receive are based on their own will.","title":"FAQ(Advertiser)"},{"location":"interstitial/","text":"Interstitial Ad private GrailAdsInterstitial newUnityInterstitial; public void RequestAndLoadInterstitialAd() { //Banner initializing newUnityInterstitial = new GrailAdsInterstitial(publisherAddress , publisherAppID , env); //Subscribe to events newUnityInterstitial.OnAdLoaded += HandleOnAdLoaded; newUnityInterstitial.OnAdClicked += HandleOnAdClicked; newUnityInterstitial.OnFailure += HandleOnFailure; newUnityInterstitial.OnAdClosed += HandleOnAdClosed; newUnityInterstitial.OnAdOpened += HandleOnAdOpened; newUnityInterstitial.OnPaidListener += HandleOnPaid; //Loading Ad newUnityInterstitial.LoadAd(); } //To show Ad public void ShowInterstitial(){ newUnityInterstitial.Show(); } public void HandleOnAdLoaded(object sender, EventArgs args) { //your action } public void HandleOnAdClicked(object sender, EventArgs args) { //your action } public void HandleOnFailure(object sender, EventArgs args) { //your action } public void HandleOnAdClosed(object sender, EventArgs args) { //your action } public void HandleOnAdOpened(object sender, EventArgs args) { //your action } public void HandleOnPaid(object sender, EventArgs args) { //your action }","title":"Interstitial"},{"location":"interstitial/#interstitial-ad","text":"private GrailAdsInterstitial newUnityInterstitial; public void RequestAndLoadInterstitialAd() { //Banner initializing newUnityInterstitial = new GrailAdsInterstitial(publisherAddress , publisherAppID , env); //Subscribe to events newUnityInterstitial.OnAdLoaded += HandleOnAdLoaded; newUnityInterstitial.OnAdClicked += HandleOnAdClicked; newUnityInterstitial.OnFailure += HandleOnFailure; newUnityInterstitial.OnAdClosed += HandleOnAdClosed; newUnityInterstitial.OnAdOpened += HandleOnAdOpened; newUnityInterstitial.OnPaidListener += HandleOnPaid; //Loading Ad newUnityInterstitial.LoadAd(); } //To show Ad public void ShowInterstitial(){ newUnityInterstitial.Show(); } public void HandleOnAdLoaded(object sender, EventArgs args) { //your action } public void HandleOnAdClicked(object sender, EventArgs args) { //your action } public void HandleOnFailure(object sender, EventArgs args) { //your action } public void HandleOnAdClosed(object sender, EventArgs args) { //your action } public void HandleOnAdOpened(object sender, EventArgs args) { //your action } public void HandleOnPaid(object sender, EventArgs args) { //your action }","title":"Interstitial Ad"},{"location":"parameters/","text":"Following are different parameters and their meaning - Parameter Description Target State State you want to target your advertisement to Target City City you want to target your advertisement to Target Android brand Phone brand of user whom you want you want to target your advertisement to Target Phone price range Phone price range of user whom you want to target your advertisement to Target Network type Network type(Dta/WIFI) of device you want to target your advertisement to Target Native language Native language of user you want to target your advertisement to Target Phone language Phone language of user whom you want to target your advertisement to Target Favorite app category Favorite app categories of users to whom you want to target your advertisement to Apps used by target user Apps used by user whom you want to target your advertisement to Apps not used by target Apps not used by user whom you want to target your advertisement to Target Interest Interests of user whom you want to target your advertisement to Target Relationship status Relationship status of user whom you want to target your advertisement to Target Gender Gender of user you want to target your advertisement to Target Family size Size of family of user you want to target your advertisement to Target Age Age range of user you want to target your advertisement to Target Earning Annual earning range of user you want to target your advertisement to Target Work sector Sector of work of user you want to target your advertisement to","title":"Targeting Parameters"},{"location":"publisher/","text":"Welcome to GrailAds Getting Started with Plugin Integration Go to GrailAds Business to register yourself as a publisher. After registration and verification, download the unity plugin package (GrailAdsUnityPlugin.unitypackage from here ). Import package into your unity project ( Assets -> Import Package -> Custom Package -> choose package to import ). To ensure proper jar files are populated ( Assets -> Play Service Resolver -> Android Resolver -> Resolve ). Include GrailAds plugin library in your project code ( using GrailAdsPlugin.Api ). Fill your unique App ID and Publisher ID at publisherAddress and publisherAppID (Find your unique App and Publisher ID's at your GrailAds dashboard after app approval). You can test your app with empty publisherAddress and publisherAppID too. You will need publisherAddress and publisherAppID for live production environment. Set env to 'TEST' for testing ads and 'LIVE' for live production of apps. You are all set to integrate GrailAds. Use the function code sample below to see how to load and show different types of Ads in your App - Banner Ads Interstitial Ads Rewarded Video Ads All three types of ads are delivered and displayed within 1 second of demand. Ads are available both when the device is online as well as offline. This ensures no revenue loss due to bad or non-availability of the network to the device. In case ad demand fails, msg = \u201cfail_demand\u201d is received to enable you to move to the next possible ad partner. For successful demand, msg = \u201csuccess_demand\u201d is received. For each of the above ad types, multiple innovative view formats are available and are displayed depending on ad specifications.","title":"How to Integrate"},{"location":"publisher/#welcome-to-grailads","text":"","title":"Welcome to GrailAds"},{"location":"publisher/#getting-started-with-plugin-integration","text":"Go to GrailAds Business to register yourself as a publisher. After registration and verification, download the unity plugin package (GrailAdsUnityPlugin.unitypackage from here ). Import package into your unity project ( Assets -> Import Package -> Custom Package -> choose package to import ). To ensure proper jar files are populated ( Assets -> Play Service Resolver -> Android Resolver -> Resolve ). Include GrailAds plugin library in your project code ( using GrailAdsPlugin.Api ). Fill your unique App ID and Publisher ID at publisherAddress and publisherAppID (Find your unique App and Publisher ID's at your GrailAds dashboard after app approval). You can test your app with empty publisherAddress and publisherAppID too. You will need publisherAddress and publisherAppID for live production environment. Set env to 'TEST' for testing ads and 'LIVE' for live production of apps. You are all set to integrate GrailAds. Use the function code sample below to see how to load and show different types of Ads in your App - Banner Ads Interstitial Ads Rewarded Video Ads All three types of ads are delivered and displayed within 1 second of demand. Ads are available both when the device is online as well as offline. This ensures no revenue loss due to bad or non-availability of the network to the device. In case ad demand fails, msg = \u201cfail_demand\u201d is received to enable you to move to the next possible ad partner. For successful demand, msg = \u201csuccess_demand\u201d is received. For each of the above ad types, multiple innovative view formats are available and are displayed depending on ad specifications.","title":"Getting Started with Plugin Integration"},{"location":"rewarded/","text":"Rewarded Ad private GrailAdsRewarded newUnityRewarded; public void RequestAndLoadRewarded() { //Initialize interstitial Ad newUnityRewarded = new GrailAdsRewarded(publisherAddress , publisherAppID , env); // Subscribe to events newUnityRewarded.OnAdLoaded += HandleOnAdLoaded; newUnityRewarded.OnAdClicked += HandleOnAdClicked; newUnityRewarded.OnFailure += HandleOnFailure; newUnityRewarded.OnAdClosed += HandleOnAdClosed; newUnityRewarded.OnAdOpened += HandleOnAdOpened; newUnityRewarded.OnPaidListener += HandleOnPaid; newUnityRewarded.OnAdRewarded += HandleOnRewarded; //Load Ad newUnityRewarded.LoadAd(); } public void ShowRewarded(){ // rewarded.Show(); newUnityRewarded.Show(); } public void HandleOnAdLoaded(object sender, EventArgs args) { //your action } public void HandleOnAdClicked(object sender, EventArgs args) { //your action } public void HandleOnFailure(object sender, EventArgs args) { //your action } public void HandleOnAdClosed(object sender, EventArgs args) { //your action } public void HandleOnAdOpened(object sender, EventArgs args) { //your action } public void HandleOnPaid(object sender, EventArgs args) { //your action } public void HandleOnRewarded(object sender, EventArgs args) { // your action }","title":"Rewarded"},{"location":"rewarded/#rewarded-ad","text":"private GrailAdsRewarded newUnityRewarded; public void RequestAndLoadRewarded() { //Initialize interstitial Ad newUnityRewarded = new GrailAdsRewarded(publisherAddress , publisherAppID , env); // Subscribe to events newUnityRewarded.OnAdLoaded += HandleOnAdLoaded; newUnityRewarded.OnAdClicked += HandleOnAdClicked; newUnityRewarded.OnFailure += HandleOnFailure; newUnityRewarded.OnAdClosed += HandleOnAdClosed; newUnityRewarded.OnAdOpened += HandleOnAdOpened; newUnityRewarded.OnPaidListener += HandleOnPaid; newUnityRewarded.OnAdRewarded += HandleOnRewarded; //Load Ad newUnityRewarded.LoadAd(); } public void ShowRewarded(){ // rewarded.Show(); newUnityRewarded.Show(); } public void HandleOnAdLoaded(object sender, EventArgs args) { //your action } public void HandleOnAdClicked(object sender, EventArgs args) { //your action } public void HandleOnFailure(object sender, EventArgs args) { //your action } public void HandleOnAdClosed(object sender, EventArgs args) { //your action } public void HandleOnAdOpened(object sender, EventArgs args) { //your action } public void HandleOnPaid(object sender, EventArgs args) { //your action } public void HandleOnRewarded(object sender, EventArgs args) { // your action }","title":"Rewarded Ad"}]}